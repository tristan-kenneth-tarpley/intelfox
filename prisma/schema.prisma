// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Source {
  REDDIT
  G2
  CAPTERRA
  QUORA
  TWITTER
}

enum ItemType {
  POST
  COMMENT
  REVIEW
}

model ScrapedItems {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  href          String    @unique
  text          String
  bodyText      String?
  parentText    String?
  source        Source
  type          ItemType
  embeddings    Float[]
  itemCreatedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum URLType {
  HOMEPAGE
  PRICING_PAGE
  CAREERS_PAGE
  CAPTERRA
}

type TeamURLs {
  type URLType
  url  String
}

model Teams {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  clerkOrgId       String     @unique
  primaryDomain    String     @unique
  name             String
  description      String
  shortDescription String?
  createdByUserId  String
  urls             TeamURLs[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  lastSyncedAt   DateTime?
  lastPreppedAt  DateTime?
  lastReportedAt DateTime? // todo we can maybe infer this, but use this for now

  @@index([lastSyncedAt])
}

model Competitors {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  domain           String     @unique
  name             String
  description      String?
  shortDescription String?
  urls             TeamURLs[]
  // maybe need a nextSyncDueAt field here

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompetitorRelationships {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId       String
  competitorId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([teamId, competitorId])
}

enum KeyPhraseTrait {
  BRANDED
  SELF
}

model TrackedKeyPhrases {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  phrase           String
  phraseEmbeddings Float[]
  teamId           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  traits           KeyPhraseTrait[]

  @@index([teamId])
  @@index([phrase, teamId])
}

model BillingTargets {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId           String
  billingEmail     String
  billingName      String
  stripeCustomerId String
  billingPhone     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

type MessagingPersonality {
  trait       String
  description String
}

enum EmailCategory {
  promotion
  info
  announcement
  alert
}

type EmailMessagingProfile {
  title       String
  summary     String
  category    EmailCategory
  personality MessagingPersonality[]
}

model EmailSummaries {
  id               String                @id @default(auto()) @map("_id") @db.ObjectId
  competitorId     String?
  teamId           String?
  date             DateTime
  messagingProfile EmailMessagingProfile
  subject          String
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
}

model PricingPageReport {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId         String?
  competitorId   String?
  pricingSummary String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

type GenericMessagingProfile {
  summary       String
  personality   MessagingPersonality[]
  companyName   String
  keyValueProps String[]
}

model MessagingProfile {
  id               String                  @id @default(auto()) @map("_id") @db.ObjectId
  teamId           String?
  competitorId     String?
  messagingProfile GenericMessagingProfile
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
}

type JobListing {
  title      String
  location   String?
  department String?
}

model JobListingsReport {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  competitorId String?
  teamId       String?
  listings     JobListing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
  @@index([competitorId])
}

model MarketIntelReport {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId           String?
  competitorId     String?
  // todo update 
  pros             String[]
  cons             String[]
  peopleGoodFor    String[]
  peopleNotGoodFor String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([teamId])
  @@index([competitorId])
  @@index([createdAt])
}

// todo this could end up being a lot more flexible/generic, but for now, just log it
model SeenScrapedItems {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  teamId        String
  scrapedItemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}
